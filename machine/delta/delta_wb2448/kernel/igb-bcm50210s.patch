diff --git a/drivers/net/ethernet/intel/igb/e1000_82575.c b/drivers/net/ethernet/intel/igb/e1000_82575.c
index 0f69ef8..6311d8b 100644
--- a/drivers/net/ethernet/intel/igb/e1000_82575.c
+++ b/drivers/net/ethernet/intel/igb/e1000_82575.c
@@ -166,6 +166,7 @@ static s32 igb_init_phy_params_82575(struct e1000_hw *hw)
 {
 	struct e1000_phy_info *phy = &hw->phy;
 	s32 ret_val = 0;
+    u32 u32Data = 0;
 	u32 ctrl_ext;
 
 	if (hw->phy.media_type != e1000_media_type_copper) {
@@ -186,6 +187,12 @@ static s32 igb_init_phy_params_82575(struct e1000_hw *hw)
 		ctrl_ext &= ~E1000_CTRL_I2C_ENA;
 	}
 
+    /* change to mdio mode */
+    u32Data = rd32(0xe04);
+    u32Data |= 0x80000000;
+    wr32(0xe04, u32Data);
+
+
 	wr32(E1000_CTRL_EXT, ctrl_ext);
 	igb_reset_mdicnfg_82580(hw);
 
@@ -286,6 +293,8 @@ static s32 igb_init_phy_params_82575(struct e1000_hw *hw)
 		phy->ops.set_d3_lplu_state = igb_set_d3_lplu_state_82580;
 		phy->ops.force_speed_duplex = igb_phy_force_speed_duplex_m88;
 		break;
+    case BCMB50210S_PHY_ID:
+        break;
 	default:
 		ret_val = -E1000_ERR_PHY;
 		goto out;
diff --git a/drivers/net/ethernet/intel/igb/e1000_defines.h b/drivers/net/ethernet/intel/igb/e1000_defines.h
index 217f813..f13777a 100644
--- a/drivers/net/ethernet/intel/igb/e1000_defines.h
+++ b/drivers/net/ethernet/intel/igb/e1000_defines.h
@@ -860,6 +860,7 @@
 #define M88_VENDOR           0x0141
 #define I210_I_PHY_ID        0x01410C00
 #define M88E1543_E_PHY_ID    0x01410EA0
+#define BCMB50210S_PHY_ID    0x600d8590
 
 /* M88E1000 Specific Registers */
 #define M88E1000_PHY_SPEC_CTRL     0x10  /* PHY Specific Control Register */
diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index 7dfbcde..ca0d19b 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -68,6 +68,9 @@ static const char igb_driver_string[] =
 static const char igb_copyright[] =
 				"Copyright (c) 2007-2014 Intel Corporation.";
 
+/* add BCM B50210S phy combo mode initialize */
+static int gi4SettedChk = 0;
+
 static const struct e1000_info *igb_info_tbl[] = {
 	[board_82575] = &e1000_82575_info,
 };
@@ -1995,6 +1998,10 @@ void igb_reset(struct igb_adapter *adapter)
 	/* Flow control settings reset on hardware reset, so guarantee flow
 	 * control is off when forcing speed.
 	 */
+
+    /* add BCM B50210S phy combo mode initialize */
+	gi4SettedChk = 0;
+
 	if (!hw->mac.autoneg)
 		igb_force_mac_fc(hw);
 
@@ -4223,6 +4230,119 @@ static void igb_watchdog_task(struct work_struct *work)
 	u32 link;
 	int i;
 	u32 connsw;
+    /* add BCM B50210S phy combo mode initialize */
+	s32 ret_val = 0;
+
+	if (gi4SettedChk == 0)
+	{
+		ret_val = phy->ops.write_reg(hw, 0x17, 0x0f7e);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x15, 0x0000);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x002f);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0x7167);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x0021);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0x7c05);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x00, 0x1140);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x0021);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0x7c04);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x09, 0x0200);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x04, 0x01e1);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x00, 0x1340);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x0234);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0xd18f);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x0b00);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0x1140);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x023e);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0x7ae2);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x0021);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0x7c05);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x023e);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0x78e2);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x0021);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0x7c04);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x023e);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0x7ae2);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x023e);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0x78e2);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x0021);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0x7c05);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x023e);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0x7ae2);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x0234);
+		mdelay(00);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0xd18f);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x0087);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0x8000);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x17, 0x0f7e);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x15, 0x0000);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x002f);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0x7167);
+		mdelay(100);
+
+		ret_val = phy->ops.write_reg(hw, 0x1e, 0x0021);
+		mdelay(100);
+		ret_val = phy->ops.write_reg(hw, 0x1f, 0x7c05);
+		mdelay(100);
+
+		gi4SettedChk = 1;
+	}
 
 	link = igb_has_link(adapter);
 

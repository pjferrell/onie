diff --git a/drivers/net/ethernet/intel/igb/Makefile b/drivers/net/ethernet/intel/igb/Makefile
index c6e4621..c30495f 100644
--- a/drivers/net/ethernet/intel/igb/Makefile
+++ b/drivers/net/ethernet/intel/igb/Makefile
@@ -33,5 +33,5 @@
 obj-$(CONFIG_IGB) += igb.o
 
 igb-objs := igb_main.o igb_ethtool.o e1000_82575.o \
-	    e1000_mac.o e1000_nvm.o e1000_phy.o e1000_mbx.o
+	    e1000_mac.o e1000_nvm.o e1000_phy.o e1000_mbx.o bcm_phy.o
 
diff --git a/drivers/net/ethernet/intel/igb/e1000_82575.c b/drivers/net/ethernet/intel/igb/e1000_82575.c
index 833f86f..b8595b0 100644
--- a/drivers/net/ethernet/intel/igb/e1000_82575.c
+++ b/drivers/net/ethernet/intel/igb/e1000_82575.c
@@ -35,6 +35,8 @@
 #include "e1000_mac.h"
 #include "e1000_82575.h"
 
+extern int bcm54616_config_init(struct e1000_hw *hw);
+
 static s32  igb_get_invariants_82575(struct e1000_hw *);
 static s32  igb_acquire_phy_82575(struct e1000_hw *);
 static void igb_release_phy_82575(struct e1000_hw *);
@@ -362,8 +364,14 @@ static s32 igb_get_invariants_82575(struct e1000_hw *hw)
 		phy->ops.get_cable_length   = igb_get_cable_length_82580;
 		phy->ops.get_phy_info       = igb_get_phy_info_82580;
 		break;
+	case BCM5461S_E_PHY_ID:
+		phy->type                   = e1000_phy_bcm5461s;
+		break;
         case BCM54616_E_PHY_ID:
 		phy->type                   = e1000_phy_bcm54616;
+		phy->ops.get_phy_info       = igb_get_phy_info_bcm;
+                phy->ops.force_speed_duplex = igb_phy_force_speed_duplex_bcm;
+                bcm54616_config_init(hw);
                 break;
 	default:
 		return -E1000_ERR_PHY;
@@ -597,6 +605,10 @@ static s32 igb_phy_hw_reset_sgmii_82575(struct e1000_hw *hw)
 
 	ret_val = igb_phy_sw_reset(hw);
 
+	if (hw->phy.type == e1000_phy_bcm5461s) {
+		igb_phy_init_script_5461s(hw);
+	}
+
 out:
 	return ret_val;
 }
@@ -1135,9 +1147,12 @@ static s32 igb_setup_copper_link_82575(struct e1000_hw *hw)
 	case e1000_phy_82580:
 		ret_val = igb_copper_link_setup_82580(hw);
 		break;
-	case e1000_phy_bcm54616:
+	case e1000_phy_bcm5461s:
 		ret_val = E1000_SUCCESS;
 		break;
+	case e1000_phy_bcm54616:
+		ret_val = igb_copper_link_setup_bcm(hw);
+		break;
 	default:
 		ret_val = -E1000_ERR_PHY;
 		break;
diff --git a/drivers/net/ethernet/intel/igb/e1000_defines.h b/drivers/net/ethernet/intel/igb/e1000_defines.h
index 88be58d..243256f 100644
--- a/drivers/net/ethernet/intel/igb/e1000_defines.h
+++ b/drivers/net/ethernet/intel/igb/e1000_defines.h
@@ -527,14 +527,18 @@
 #define E1000_MPHY_PCS_CLK_REG_DIGINELBEN 0x10
 
 /* PHY Control Register */
+#define MII_CR_SPEED_SELECT_MSB	0x0040  /* bits 6,13: 10=1000, 01=100, 00=10 */
+#define MII_CR_COLL_TEST_ENABLE	0x0080  /* Collision test enable */
 #define MII_CR_FULL_DUPLEX      0x0100  /* FDX =1, half duplex =0 */
 #define MII_CR_RESTART_AUTO_NEG 0x0200  /* Restart auto negotiation */
+#define MII_CR_ISOLATE		0x0400  /* Isolate PHY from MII */
 #define MII_CR_POWER_DOWN       0x0800  /* Power down */
 #define MII_CR_AUTO_NEG_EN      0x1000  /* Auto Neg Enable */
+#define MII_CR_SPEED_SELECT_LSB	0x2000  /* bits 6,13: 10=1000, 01=100, 00=10 */
 #define MII_CR_LOOPBACK         0x4000  /* 0 = normal, 1 = loopback */
 #define MII_CR_RESET            0x8000  /* 0 = normal, 1 = PHY reset */
-#define MII_CR_SPEED_1000       0x0040
-#define MII_CR_SPEED_100        0x2000
+#define MII_CR_SPEED_1000	(MII_CR_SPEED_SELECT_MSB)
+#define MII_CR_SPEED_100	(MII_CR_SPEED_SELECT_LSB)
 #define MII_CR_SPEED_10         0x0000
 
 /* PHY Status Register */
@@ -558,6 +562,8 @@
 /* 1000BASE-T Control Register */
 #define CR_1000T_HD_CAPS         0x0100 /* Advertise 1000T HD capability */
 #define CR_1000T_FD_CAPS         0x0200 /* Advertise 1000T FD capability  */
+#define CR_1000T_REPEATER_DTE    0x0400 /* 1=Repeater/switch device port */
+					/* 0=DTE device */
 #define CR_1000T_MS_VALUE        0x0800 /* 1=Configure PHY as Master */
 					/* 0=Configure PHY as Slave */
 #define CR_1000T_MS_ENABLE       0x1000 /* 1=Master/Slave manual config value */
@@ -694,6 +700,7 @@
 #define I82580_I_PHY_ID      0x015403A0
 #define I350_I_PHY_ID        0x015403B0
 #define M88_VENDOR           0x0141
+#define BCM5461S_E_PHY_ID    0x002060C0
 #define BCM54616_E_PHY_ID    0x03625D10
 
 /* M88E1000 Specific Registers */
diff --git a/drivers/net/ethernet/intel/igb/e1000_hw.h b/drivers/net/ethernet/intel/igb/e1000_hw.h
index ab7c843..eda538d 100644
--- a/drivers/net/ethernet/intel/igb/e1000_hw.h
+++ b/drivers/net/ethernet/intel/igb/e1000_hw.h
@@ -121,6 +121,7 @@ enum e1000_phy_type {
 	e1000_phy_ife,
 	e1000_phy_82580,
 	e1000_phy_bcm54616,
+	e1000_phy_bcm5461s,
 };
 
 enum e1000_bus_type {
diff --git a/drivers/net/ethernet/intel/igb/e1000_phy.c b/drivers/net/ethernet/intel/igb/e1000_phy.c
index b17d7c2..780495b 100644
--- a/drivers/net/ethernet/intel/igb/e1000_phy.c
+++ b/drivers/net/ethernet/intel/igb/e1000_phy.c
@@ -468,6 +468,19 @@ out:
 	return ret_val;
 }
 
+s32 igb_copper_link_setup_bcm(struct e1000_hw *hw)
+{
+	struct e1000_phy_info *phy = &hw->phy;
+	s32 ret_val;
+	u16 phy_data;
+
+	ret_val = phy->ops.read_reg(hw, PHY_CONTROL, &phy_data);
+	phy_data &= ~(MII_CR_ISOLATE);
+	ret_val = phy->ops.write_reg(hw, PHY_CONTROL, phy_data);
+
+	return E1000_SUCCESS;
+}
+
 /**
  *  igb_copper_link_setup_m88 - Setup m88 PHY's for copper link
  *  @hw: pointer to the HW structure
@@ -1168,6 +1181,74 @@ out:
  *  After reset, TX_CLK and CRS on TX must be set.  Return successful upon
  *  successful completion, else return corresponding error code.
  **/
+
+/**
+ *  e1000_phy_force_speed_duplex_m88 - Force speed/duplex for m88 PHY
+ *  @hw: pointer to the HW structure
+ *
+ *  Calls the PHY setup function to force speed and duplex.  Clears the
+ *  auto-crossover to force MDI manually.  Resets the PHY to commit the
+ *  changes.  If time expires while waiting for link up, we reset the DSP.
+ *  After reset, TX_CLK and CRS on Tx must be set.  Return successful upon
+ *  successful completion, else return corresponding error code.
+ **/
+
+s32 igb_phy_force_speed_duplex_bcm(struct e1000_hw *hw)
+{
+	struct e1000_phy_info *phy = &hw->phy;
+	s32 ret_val;
+	u16 phy_data;
+	bool link;
+
+	hw_dbg("e1000_phy_force_speed_duplex_igp");
+
+	ret_val = phy->ops.read_reg(hw, PHY_CONTROL, &phy_data);
+	if (ret_val)
+		return ret_val;
+
+	igb_phy_force_speed_duplex_setup(hw, &phy_data);
+
+	phy_data &= ~(MII_CR_POWER_DOWN | MII_CR_ISOLATE);
+	ret_val = phy->ops.write_reg(hw, PHY_CONTROL, phy_data);
+	if (ret_val)
+		return ret_val;
+
+	/* Clear Auto-Crossover to force MDI manually.  IGP requires MDI
+	 * forced whenever speed and duplex are forced.
+	 */
+	#if 0
+	ret_val = phy->ops.read_reg(hw, IGP01E1000_PHY_PORT_CTRL, &phy_data);
+	if (ret_val)
+		return ret_val;
+
+	phy_data &= ~IGP01E1000_PSCR_AUTO_MDIX;
+	phy_data &= ~IGP01E1000_PSCR_FORCE_MDI_MDIX;
+
+	ret_val = phy->ops.write_reg(hw, IGP01E1000_PHY_PORT_CTRL, phy_data);
+	if (ret_val)
+		return ret_val;
+
+	DEBUGOUT1("IGP PSCR: %X\n", phy_data);
+	#endif
+	udelay(1);
+
+	if (phy->autoneg_wait_to_complete) {
+		hw_dbg("Waiting for forced speed/duplex link on IGP phy.\n");
+
+		ret_val = igb_phy_has_link(hw, PHY_FORCE_LIMIT, 100000, &link);
+		if (ret_val)
+			return ret_val;
+
+		if (!link)
+			hw_dbg("Link taking longer than expected.\n");
+
+		/* Try once more */
+		ret_val = igb_phy_has_link(hw, PHY_FORCE_LIMIT, 100000, &link);
+	}
+
+	return ret_val;
+}
+
 s32 igb_phy_force_speed_duplex_m88(struct e1000_hw *hw)
 {
 	struct e1000_phy_info *phy = &hw->phy;
@@ -1895,6 +1976,40 @@ out:
 	return ret_val;
 }
 
+s32 igb_get_phy_info_bcm(struct e1000_hw *hw)
+{
+	struct e1000_phy_info *phy = &hw->phy;
+	s32 ret_val;
+	bool link;
+
+	hw_dbg("e1000_get_phy_info_bcm");
+
+	if (phy->media_type != e1000_media_type_copper) {
+		hw_dbg("Phy info is only valid for copper media\n");
+		return -E1000_ERR_CONFIG;
+	}
+
+	ret_val = igb_phy_has_link(hw, 1, 0, &link);
+	if (ret_val)
+		return ret_val;
+
+	if (!link) {
+		hw_dbg("Phy info is only valid if link is up\n");
+		return -E1000_ERR_CONFIG;
+	}
+
+	#if 0
+	phy->polarity_correction =true;
+	phy->is_mdix = true;
+	phy->cable_length = E1000_CABLE_LENGTH_UNDEFINED;
+	phy->local_rx = e1000_1000t_rx_status_undefined;
+	phy->remote_rx = e1000_1000t_rx_status_undefined;
+	ret_val=0;
+	#endif
+
+	return ret_val;
+}
+
 /**
  *  igb_get_phy_info_igp - Retrieve igp PHY information
  *  @hw: pointer to the HW structure
@@ -2120,6 +2235,36 @@ s32 igb_phy_init_script_igp3(struct e1000_hw *hw)
 }
 
 /**
+ *  igb_phy_init_script_5461s - Inits the BCM5461S PHY
+ *  @hw: pointer to the HW structure
+ *
+ *  Initializes a Broadcom Gigabit PHY.
+ **/
+s32 igb_phy_init_script_5461s(struct e1000_hw *hw)
+{
+	u16 mii_reg_led = 0;
+
+	hw_dbg("Running BCM5461S PHY init script\n");
+
+	/* 1. Speed LED (Set the Link LED mode), Shadow 00010, 0x1C.bit2=1 */
+	hw->phy.ops.write_reg(hw, 0x1C, 0x0800);
+	hw->phy.ops.read_reg(hw, 0x1C, &mii_reg_led);
+	mii_reg_led |= 0x0004;
+	hw->phy.ops.write_reg(hw, 0x1C, mii_reg_led | 0x8000);
+
+	/* 2. Active LED (Set the Link LED mode), Shadow 01001, 0x1C.bit4=1, 0x10.bit5=0 */
+	hw->phy.ops.write_reg(hw, 0x1C, 0x2400);
+	hw->phy.ops.read_reg(hw, 0x1C, &mii_reg_led);
+	mii_reg_led |= 0x0010;
+	hw->phy.ops.write_reg(hw, 0x1C, mii_reg_led | 0x8000);
+	hw->phy.ops.read_reg(hw, 0x10, &mii_reg_led);
+	mii_reg_led &= 0xffdf;
+	hw->phy.ops.write_reg(hw, 0x10, mii_reg_led);
+
+	return E1000_SUCCESS;
+}
+
+/**
  * igb_power_up_phy_copper - Restore copper link in case of PHY power down
  * @hw: pointer to the HW structure
  *
diff --git a/drivers/net/ethernet/intel/igb/e1000_phy.h b/drivers/net/ethernet/intel/igb/e1000_phy.h
index 8510797..7ab0ee5 100644
--- a/drivers/net/ethernet/intel/igb/e1000_phy.h
+++ b/drivers/net/ethernet/intel/igb/e1000_phy.h
@@ -44,9 +44,11 @@ enum e1000_smart_speed {
 s32  igb_check_downshift(struct e1000_hw *hw);
 s32  igb_check_reset_block(struct e1000_hw *hw);
 s32  igb_copper_link_setup_igp(struct e1000_hw *hw);
+s32  igb_copper_link_setup_bcm(struct e1000_hw *hw);
 s32  igb_copper_link_setup_m88(struct e1000_hw *hw);
 s32  igb_copper_link_setup_m88_gen2(struct e1000_hw *hw);
 s32  igb_phy_force_speed_duplex_igp(struct e1000_hw *hw);
+s32  igb_phy_force_speed_duplex_bcm(struct e1000_hw *hw);
 s32  igb_phy_force_speed_duplex_m88(struct e1000_hw *hw);
 s32  igb_get_cable_length_m88(struct e1000_hw *hw);
 s32  igb_get_cable_length_m88_gen2(struct e1000_hw *hw);
@@ -54,6 +56,7 @@ s32  igb_get_cable_length_igp_2(struct e1000_hw *hw);
 s32  igb_get_phy_id(struct e1000_hw *hw);
 s32  igb_get_phy_info_igp(struct e1000_hw *hw);
 s32  igb_get_phy_info_m88(struct e1000_hw *hw);
+s32 igb_get_phy_info_bcm(struct e1000_hw *hw);
 s32  igb_phy_sw_reset(struct e1000_hw *hw);
 s32  igb_phy_hw_reset(struct e1000_hw *hw);
 s32  igb_read_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 *data);
@@ -65,6 +68,7 @@ s32  igb_phy_has_link(struct e1000_hw *hw, u32 iterations,
 void igb_power_up_phy_copper(struct e1000_hw *hw);
 void igb_power_down_phy_copper(struct e1000_hw *hw);
 s32  igb_phy_init_script_igp3(struct e1000_hw *hw);
+s32  igb_phy_init_script_5461s(struct e1000_hw *hw);
 s32  igb_read_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 *data);
 s32  igb_write_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 data);
 s32  igb_read_phy_reg_i2c(struct e1000_hw *hw, u32 offset, u16 *data);
diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index 6704fff..92aeaf6 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -107,6 +107,7 @@ static DEFINE_PCI_DEVICE_TABLE(igb_pci_tbl) = {
 MODULE_DEVICE_TABLE(pci, igb_pci_tbl);
 
 void igb_reset(struct igb_adapter *);
+extern void bcm54616s_linkup(struct e1000_hw *hw,int speed , int duplex);
 static int igb_setup_all_tx_resources(struct igb_adapter *);
 static int igb_setup_all_rx_resources(struct igb_adapter *);
 static void igb_free_all_tx_resources(struct igb_adapter *);
@@ -3651,6 +3652,14 @@ static void igb_watchdog_task(struct work_struct *work)
 			                                 &adapter->link_speed,
 			                                 &adapter->link_duplex);
 
+			switch (hw->phy.type){
+				case e1000_phy_bcm54616:
+					bcm54616s_linkup(hw, adapter->link_speed, adapter->link_duplex);
+					break;
+				default:
+					break;
+			}
+
 			ctrl = rd32(E1000_CTRL);
 			/* Links status message must follow this format */
 			printk(KERN_INFO "igb: %s NIC Link is Up %d Mbps %s, "
@@ -6254,6 +6263,10 @@ static int igb_mii_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd)
 			return -EIO;
 		break;
 	case SIOCSMIIREG:
+		if (igb_write_phy_reg(&adapter->hw, data->reg_num & 0x1F,
+		                     data->val_in))
+			return -EIO;
+		break;
 	default:
 		return -EOPNOTSUPP;
 	}
diff --git a/drivers/net/ethernet/intel/igb/bcm_phy.c b/drivers/net/ethernet/intel/igb/bcm_phy.c
new file mode 100644
index 0000000..ad769df
--- /dev/null
+++ b/drivers/net/ethernet/intel/igb/bcm_phy.c
@@ -0,0 +1,321 @@
+#include "e1000_hw.h"
+
+/*
+ * 1000Base-T Control Register
+ */
+#define MII_GB_CTRL_MS_MAN      (1 << 12) /* Manual Master/Slave mode */
+#define MII_GB_CTRL_MS          (1 << 11) /* Master/Slave negotiation mode */
+#define MII_GB_CTRL_PT          (1 << 10) /* Port type */
+#define MII_GB_CTRL_ADV_1000FD  (1 << 9)  /* Advertise 1000Base-T FD */
+#define MII_GB_CTRL_ADV_1000HD  (1 << 8)  /* Advertise 1000Base-T HD */
+
+#define MII_BCM54XX_ECR         0x10    /* BCM54xx extended control register */
+#define MII_BCM54XX_ECR_IM      0x1000  /* Interrupt mask */
+#define MII_BCM54XX_ECR_IF      0x0800  /* Interrupt force */
+#define MII_BCM54XX_ESR         0x11    /* BCM54xx extended status register */
+#define MII_BCM54XX_ESR_IS      0x1000  /* Interrupt status */
+#define MII_BCM54XX_EXP_DATA    0x15    /* Expansion register data */
+#define MII_BCM54XX_EXP_SEL     0x17    /* Expansion register select */
+#define MII_BCM54XX_EXP_SEL_SSD 0x0e00  /* Secondary SerDes select */
+#define MII_BCM54XX_EXP_SEL_ER  0x0f00  /* Expansion register select */
+#define MII_BCM54XX_AUX_CTL     0x18    /* Auxiliary control register */
+#define MII_BCM54XX_AUX_CTL_ENCODE(val) (((val & 0x7) << 12)|(val & 0x7))
+#define MII_BCM54XX_ISR         0x1a    /* BCM54xx interrupt status register */
+#define MII_BCM54XX_IMR         0x1b    /* BCM54xx interrupt mask register */
+#define MII_BCM54XX_INT_CRCERR  0x0001  /* CRC error */
+#define MII_BCM54XX_INT_LINK    0x0002  /* Link status changed */
+#define MII_BCM54XX_INT_SPEED   0x0004  /* Link speed change */
+#define MII_BCM54XX_INT_DUPLEX  0x0008  /* Duplex mode changed */
+#define MII_BCM54XX_INT_LRS     0x0010  /* Local receiver status changed */
+#define MII_BCM54XX_INT_RRS     0x0020  /* Remote receiver status changed */
+#define MII_BCM54XX_INT_SSERR   0x0040  /* Scrambler synchronization error */
+#define MII_BCM54XX_INT_UHCD    0x0080  /* Unsupported HCD negotiated */
+#define MII_BCM54XX_INT_NHCD    0x0100  /* No HCD */
+#define MII_BCM54XX_INT_NHCDL   0x0200  /* No HCD link */
+#define MII_BCM54XX_INT_ANPR    0x0400  /* Auto-negotiation page received */
+#define MII_BCM54XX_INT_LC      0x0800  /* All counters below 128 */
+#define MII_BCM54XX_INT_HC      0x1000  /* Counter above 32768 */
+#define MII_BCM54XX_INT_MDIX    0x2000  /* MDIX status change */
+#define MII_BCM54XX_INT_PSERR   0x4000  /* Pair swap error */
+
+/*
+ * MII Link Advertisment
+ */
+#define MII_ANA_ASF             (1 << 0) /* Advertise Selector Field */
+#define MII_ANA_HD_10           (1 << 5) /* Half duplex 10Mb/s supported */
+#define MII_ANA_FD_10           (1 << 6) /* Full duplex 10Mb/s supported */
+#define MII_ANA_HD_100          (1 << 7) /* Half duplex 100Mb/s supported */
+#define MII_ANA_FD_100          (1 << 8) /* Full duplex 100Mb/s supported */
+#define MII_ANA_T4              (1 << 9) /* T4 */
+#define MII_ANA_PAUSE           (1 << 10)/* Pause supported */
+#define MII_ANA_ASYM_PAUSE      (1 << 11)/* Asymmetric pause supported */
+#define MII_ANA_RF              (1 << 13)/* Remote fault */
+#define MII_ANA_NP              (1 << 15)/* Next Page */
+
+#define MII_ANA_ASF_802_3       (1)      /* 802.3 PHY */
+
+#define MII_BCM54XX_SHD         0x1c    /* 0x1c shadow registers */
+#define MII_BCM54XX_SHD_WRITE   0x8000
+#define MII_BCM54XX_SHD_VAL(x)  ((x & 0x1f) << 10)
+#define MII_BCM54XX_SHD_DATA(x) ((x & 0x3ff) << 0)
+
+#define MII_BCM54XX_AUX_STATUS                0x19    /* Auxiliary status */
+#define MII_BCM54XX_AUX_STATUS_LINKMODE_MASK  0x0700
+#define MII_BCM54XX_AUX_STATUS_LINKMODE_SHIFT 8
+#define MII_BCM54XX_SHD_WR_ENCODE(val, data) \
+  (MII_BCM54XX_SHD_WRITE | MII_BCM54XX_SHD_VAL(val) | \
+   MII_BCM54XX_SHD_DATA(data))
+
+/*
+ * AUXILIARY CONTROL SHADOW ACCESS REGISTERS.  (PHY REG 0x18)
+ */
+#define MII_BCM54XX_AUXCTL_SHDWSEL_AUXCTL       0x0000
+#define MII_BCM54XX_AUXCTL_ACTL_TX_6DB          0x0400
+#define MII_BCM54XX_AUXCTL_ACTL_SMDSP_ENA       0x0800
+
+#define MII_BCM54XX_AUXCTL_MISC_WREN            0x8000
+#define MII_BCM54XX_AUXCTL_MISC_FORCE_AMDIX     0x0200
+#define MII_BCM54XX_AUXCTL_MISC_RDSEL_MISC      0x7000
+#define MII_BCM54XX_AUXCTL_SHDWSEL_MISC         0x0007
+
+#define MII_BCM54XX_AUXCTL_SHDWSEL_AUXCTL       0x0000
+
+/*
+ * Broadcom LED source encodings.  These are used in BCM5461, BCM5481,
+ * BCM5482, and possibly some others.
+ */
+#define BCM_LED_SRC_LINKSPD1    0x0
+#define BCM_LED_SRC_LINKSPD2    0x1
+#define BCM_LED_SRC_XMITLED     0x2
+#define BCM_LED_SRC_ACTIVITYLED 0x3
+#define BCM_LED_SRC_FDXLED      0x4
+#define BCM_LED_SRC_SLAVE       0x5
+#define BCM_LED_SRC_INTR        0x6
+#define BCM_LED_SRC_QUALITY     0x7
+#define BCM_LED_SRC_RCVLED      0x8
+#define BCM_LED_SRC_MULTICOLOR1 0xa
+#define BCM_LED_SRC_OPENSHORT   0xb
+#define BCM_LED_SRC_OFF         0xe     /* Tied high */
+#define BCM_LED_SRC_ON          0xf     /* Tied low */
+
+/*
+ * BCM54XX: Shadow registers
+ * Shadow values go into bits [14:10] of register 0x1c to select a shadow
+ * register to access.
+ */
+#define BCM54XX_SHD_AUTODETECT  0x1e    /* 11110: Auto detect Regisrer */
+#define BCM54XX_SHD_MODE        0x1f    /* 11111: Mode Control Register */
+#define BCM54XX_SHD_MODE_COPPER 1<<7
+#define BCM54XX_SHD_MODE_SER    1<<6
+
+/*
+ * EXPANSION SHADOW ACCESS REGISTERS.  (PHY REG 0x15, 0x16, and 0x17)
+ */
+#define MII_BCM54XX_EXP_AADJ1CH0               0x001f
+#define MII_BCM54XX_EXP_AADJ1CH0_SWP_ABCD_OEN  0x0200
+#define MII_BCM54XX_EXP_AADJ1CH0_SWSEL_THPF    0x0100
+#define MII_BCM54XX_EXP_AADJ1CH3               0x601f
+#define MII_BCM54XX_EXP_AADJ1CH3_ADCCKADJ      0x0002
+#define MII_BCM54XX_EXP_EXP08                  0x0F08
+#define MII_BCM54XX_EXP_EXP08_RJCT_2MHZ        0x0001
+#define MII_BCM54XX_EXP_EXP08_EARLY_DAC_WAKE   0x0200
+#define MII_BCM54XX_EXP_EXP75                  0x0f75
+#define MII_BCM54XX_EXP_EXP75_VDACCTRL         0x003c
+#define MII_BCM54XX_EXP_EXP96                  0x0f96
+#define MII_BCM54XX_EXP_EXP96_MYST             0x0010
+#define MII_BCM54XX_EXP_EXP97                  0x0f97
+#define MII_BCM54XX_EXP_EXP97_MYST             0x0c0c
+
+/*
+ * Indirect register access functions for the 1000BASE-T/100BASE-TX/10BASE-T
+ * 0x1c shadow registers.
+ */
+
+int bcmphy_write(struct e1000_hw *hw,u32 reg, u16 regval)
+{
+    u32 ret;
+    struct e1000_phy_info *phy = &hw->phy;
+
+    ret = phy->ops.write_reg(hw,reg, regval);
+    return ret;
+}
+
+u16 bcmphy_read(struct e1000_hw *hw, u32 reg)
+{
+    u16 val;
+    struct e1000_phy_info *phy = &hw->phy;
+
+    phy->ops.read_reg(hw,reg, &val);
+    return val;
+}
+
+
+static int bcm54xx_shadow_read(struct e1000_hw *hw, u16 shadow)
+{
+    bcmphy_write(hw, MII_BCM54XX_SHD, MII_BCM54XX_SHD_VAL(shadow));
+    return MII_BCM54XX_SHD_DATA(bcmphy_read(hw, MII_BCM54XX_SHD));
+}
+
+static int bcm54xx_shadow_write(struct e1000_hw *hw, u16 shadow, u16 val)
+{
+    return bcmphy_write(hw, MII_BCM54XX_SHD,
+                            MII_BCM54XX_SHD_WRITE |
+                            MII_BCM54XX_SHD_VAL(shadow) |
+                            MII_BCM54XX_SHD_DATA(val));
+}
+
+static int bcm54xx_auxctl_write(struct e1000_hw *hw, u16 regnum, u16 val)
+{
+    return bcmphy_write(hw, MII_BCM54XX_AUX_CTL, (regnum | val));
+}
+
+static int bcm54xx_config_init(struct e1000_hw *hw)
+{
+    int reg, err;
+
+    reg = bcmphy_read(hw, MII_BCM54XX_ECR);
+    if (reg < 0)
+        return reg;
+
+    /* Mask interrupts globally.  */
+    reg |= MII_BCM54XX_ECR_IM;
+    err = bcmphy_write(hw, MII_BCM54XX_ECR, reg);
+    if (err < 0)
+        return err;
+
+    /* Unmask events we are interested in.  */
+    reg = ~(MII_BCM54XX_INT_DUPLEX |
+            MII_BCM54XX_INT_SPEED |
+            MII_BCM54XX_INT_LINK);
+    err = bcmphy_write(hw, MII_BCM54XX_IMR, reg);
+    if (err < 0)
+        return err;
+
+    return 0;
+}
+
+void bcm54616s_linkup(struct e1000_hw *hw, int speed, int duplex)
+{
+    u16 regval;
+
+    /* set speed and full duplex*/
+    regval = bcmphy_read(hw,PHY_CONTROL);
+    regval &= ~(MII_CR_SPEED_SELECT_MSB |
+                MII_CR_SPEED_SELECT_LSB |
+                MII_CR_FULL_DUPLEX);
+
+    switch(speed) {
+        case SPEED_10:
+            regval |= MII_CR_SPEED_10;
+            break;
+        case SPEED_100:
+            regval |= MII_CR_SPEED_100;
+            break;
+        case SPEED_1000:
+        default:
+            regval |= MII_CR_SPEED_1000;
+            break;
+    }
+
+    switch(duplex) {
+        case FULL_DUPLEX:
+            regval |= MII_CR_FULL_DUPLEX;
+            break;
+    }
+
+    bcmphy_write(hw,PHY_CONTROL, regval);
+
+    #if 0
+    /* set Master auto and cap*/
+    regval = bcmphy_read(hw,PHY_1000T_CTRL);
+    regval &= ~(MII_GB_CTRL_MS_MAN);
+    regval |= MII_ANA_ASF_802_3;
+    regval |= MII_ANA_HD_10;
+    regval |= MII_ANA_HD_100;
+    regval |= MII_ANA_FD_10;
+    regval |= MII_ANA_FD_100;
+    regval |= MII_ANA_ASYM_PAUSE;
+    regval |= (MII_ANA_PAUSE | MII_ANA_ASYM_PAUSE);
+    regval |= MII_ANA_PAUSE;
+    bcmphy_write(hw, PHY_1000T_CTRL, regval);
+
+    regval = bcmphy_read(hw,PHY_CONTROL);
+    regval |= (MII_CR_AUTO_NEG_EN | MII_CR_RESTART_AUTO_NEG);
+    bcmphy_write(hw,PHY_CONTROL,regval);
+    #endif
+
+    regval = bcmphy_read(hw, PHY_CONTROL);
+    regval &= ~(MII_CR_ISOLATE);
+    bcmphy_write(hw, PHY_CONTROL, regval);
+}
+
+int bcm54616_config_init(struct e1000_hw *hw)
+{
+    int err, reg;
+    u16 regval;
+    int i;
+
+    /* reset PHY */
+    regval = (1<<15);
+    bcmphy_write(hw, PHY_CONTROL, regval);
+
+    mdelay(10);
+
+    /* disable Power down and iso */
+    regval = bcmphy_read(hw,PHY_CONTROL);
+    regval &= ~(MII_CR_POWER_DOWN | MII_CR_ISOLATE);
+    bcmphy_write(hw, PHY_CONTROL, regval);
+
+    /* disable suport I */
+    /*0000 0100 1100 0010 */
+    bcm54xx_auxctl_write(hw, 0, 0x04c2);
+
+    regval = bcmphy_read(hw, MII_BCM54XX_AUX_CTL);
+
+    /* set 1000base-T */
+    regval = bcmphy_read(hw, PHY_1000T_CTRL);
+    regval |= (CR_1000T_FD_CAPS | CR_1000T_REPEATER_DTE);
+    bcmphy_write(hw, PHY_1000T_CTRL, regval);
+
+    /* set ctrl  */
+    regval = (MII_CR_SPEED_1000 |
+              MII_CR_FULL_DUPLEX |
+              MII_CR_SPEED_SELECT_MSB);
+    bcmphy_write(hw, PHY_CONTROL, regval);
+
+    /* Setup read from auxilary control shadow register 7 */
+    bcmphy_write(hw, MII_BCM54XX_AUX_CTL, MII_BCM54XX_AUX_CTL_ENCODE(7));
+
+    /* Read Misc Control register */
+    reg = ((bcmphy_read(hw, MII_BCM54XX_AUX_CTL) & 0x8FFF) | 0x8010);
+    bcmphy_write(hw, MII_BCM54XX_AUX_CTL, reg);
+
+    /* Enable auto-detect and copper prefer */
+    bcm54xx_shadow_write(hw, BCM54XX_SHD_AUTODETECT, 0x31);
+
+    err = bcm54xx_config_init(hw);
+
+    /* set link parner */
+    regval = MII_ANA_ASF_802_3;
+    regval |= MII_ANA_HD_10;
+    regval |= MII_ANA_HD_100;
+    regval |= MII_ANA_FD_10;
+    regval |= MII_ANA_FD_100;
+    regval |= MII_ANA_ASYM_PAUSE;
+    regval |= (MII_ANA_PAUSE | MII_ANA_ASYM_PAUSE);
+    regval |= MII_ANA_PAUSE;
+    bcmphy_write(hw, PHY_AUTONEG_ADV, reg);
+
+    i=0;
+    while (1) {
+        regval = bcm54xx_shadow_read(hw,BCM54XX_SHD_MODE);
+        if (regval & BCM54XX_SHD_MODE_SER)
+            break;
+        if (i++ > 500) {
+            //printk("SERDES no link %x\n",regval);
+            break;
+        }
+        mdelay(1);   /* 1 ms */
+    }
+    return err;
+}
